/**
 * {{description}}
 * @author {{_.git.name}}
 */
const fs = require('fs')
const nps = require('path')
const { promisify } = require('util')

const { GlobsCommand } = require('lerna-utils-globs-command')
const { getFilteredPackages } = require('@lerna/filter-options')
const { ValidationError } = require('@lerna/validation-error')

module.exports = factory
module.exports.{{{camelCase name}}}Options = {{{camelCase name}}}Options

function {{{camelCase name}}}Options(yargs) {
  const opts = {
    // todo
  }
  return yargs.options(opts).group(Object.keys(opts), '{{{pascalCase name}}} Options:')
}

function factory(argv) {
  return new {{{pascalCase name}}}Command(argv)
}

class {{{pascalCase name}}}Command extends GlobsCommand {
  get requiresGit() {
    return true
  }
  async initialize() {
    super.initialize()
    this.logger.verbose('options:', this.options)

    this.validPackages = await getFilteredPackages(this.packageGraph, this.execOpts, {
      ...this.options
    })
  }

  async executeEach(dir, { remote = 'origin', branch }) {

  }

  async execute() {
    await super.execute()
  }
}

{{{pascalCase name}}}Command.name = '{{{name}}}'
